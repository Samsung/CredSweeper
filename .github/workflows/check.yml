# This workflow performs static analysis and checks coding style

name: Static analysis and code style

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  checkers:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    # # # line ending

    - name: Check for text file ending
      run: |
        n=0
        for f in $(find . -type f -not -wholename '*/.*' -a -not -wholename '*/tests/samples/*' -a -not -wholename '*/corpus/*'); do
            n=$(( 1 + ${n} ))
            filetype=$(file ${f})
            if echo "${filetype}" | grep -q '.*text.*'; then
                echo "CHECK:'${filetype}'"
                lastbyte=$(hexdump -v -e '/1 "%02X\n"' ${f} | tail -1)
                echo "Last byte is '${lastbyte}'"
                if [ "0A" != "${lastbyte}" ]; then
                    echo "File ${f} has inappropriate line ending"
                    tail -1 ${f} | hexdump -C
                else
                    n=$(( ${n} - 1 ))
                fi
            else
                echo "SKIP:'${filetype}'"
                n=$(( ${n} - 1 ))
            fi
        done
        exit ${n}

    # # # git workflow

    - name: Get latest release tag name
      run: |
        if [ "pull_request" == "${{ github.event_name }}" ]; then
            API_RELEASE_URL=$(echo "${{ github.event.pull_request.base.repo.releases_url }}")
        else
            API_RELEASE_URL=$(echo "${{ github.event.repository.releases_url }}")
        fi
        echo "'${API_RELEASE_URL}'" # dbg
        API_RELEASE_URL=$(echo "${API_RELEASE_URL}" | sed 's|.....$||')
        echo "'${API_RELEASE_URL}'" # dbg
        API_RELEASE_URL=$(echo "${API_RELEASE_URL}/latest")
        echo "'${API_RELEASE_URL}'" # dbg
        LATEST_RELEASE_TAG=$(
            curl \
                --silent \
                --header "Accept: application/vnd.github.v3+json" \
                --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                ${API_RELEASE_URL} \
            | \
            jq \
                --raw-output \
                '.tag_name' \
            )
        echo "LATEST_RELEASE_TAG='${LATEST_RELEASE_TAG}'"
        export GIT_ANCESTOR=${LATEST_RELEASE_TAG}
        if bash cicd/git_workflow.sh; then
            echo "GIT workflow OK"
        else
            echo "Please, rebase the branch after ${LATEST_RELEASE_TAG}"
            exit 1
        fi

    # # # Python setup

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.9"

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install CredSweeper and auxiliary packages
      run: pip install .

    - name: Install analysis tools and auxiliary packages
      run: |
        pip install \
            flake8 \
            mypy \
            pylint \
            types-PyYAML \
            types-requests \
            types-oauthlib \
            types-regex \
            types-humanfriendly \
            yapf \
            ;

    - name: List all installed pip packages for debug purpose
      run: pip list

    # # # pylint

    - name: Analysing the code with pylint and minimum Python version 3.7
      run: pylint --py-version=3.7 --errors-only credsweeper

    - name: Analysing the code with pylint and minimum Python version 3.8
      run: pylint --py-version=3.8 --errors-only credsweeper

    - name: Analysing the code with pylint and minimum Python version 3.9
      run: pylint --py-version=3.9 --errors-only credsweeper

    # # # mypy

    - name: Analysing the code with mypy and minimum Python version 3.7
      run: mypy --config-file .mypy.ini --python-version=3.7 credsweeper | LC_ALL=C sort -g | diff cicd/mypy_warnings.txt -

    - name: Analysing the code with mypy and minimum Python version 3.8
      run: mypy --config-file .mypy.ini --python-version=3.8 credsweeper | LC_ALL=C sort -g | diff cicd/mypy_warnings.txt -

    - name: Analysing the code with mypy and minimum Python version 3.9
      run: mypy --config-file .mypy.ini --python-version=3.9 credsweeper | LC_ALL=C sort -g | diff cicd/mypy_warnings.txt -

    # # # documentation

    - name: Analysing the code with pylint for NEW missed docstrings of classes or functions
      run: pylint --disable=R,W,C0114,C0103,C0415,C0200,C0201,C0325 --verbose credsweeper 2>/dev/null | grep '^credsweeper/' | LC_ALL=C sort -g | diff cicd/missed_docstrings.txt -

    # # # yapf

    - name: Apply project style
      run: |
        for f in credsweeper tests docs experiment setup.py; do
            yapf --style .style.yapf --recursive --in-place --parallel $f
        done

    - name: Verify whether there are changes
      run: |
        if [ 0 -ne $(git ls-files -m | wc -l) ]; then
          git diff
          echo "<- difference how to apply the style"
          exit 1
        fi

    # # # flake8

    - name: Create directory for flake8 reports
      run: mkdir -vp flake8_report

    - name: Analysing the code with flake8
      run: |
        ERRCNT=$(flake8 credsweeper --count --exit-zero --output-file=flake8.txt)
        if ! [ 0 -eq ${ERRCNT} ] ; then
            echo "flake8 found '${ERRCNT}' failures:"
            cat flake8.txt
            exit 1
        fi

    - name: FLAKE 8 reports
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: flake8_report
        path: flake8.txt

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
