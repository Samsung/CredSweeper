# This workflow performs static analysis and checks coding style

name: Static analysis and code style

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  checkers:

    runs-on: ubuntu-latest

    steps:

    # # # MUST be full history to check git workflow

    - name: Checkout
      id: code_checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    # # # line ending

    - name: Check for text file ending
      if: ${{ always() && steps.code_checkout.conclusion == 'success' }}
      run: |
        n=0
        for f in $(find . -type f -not -wholename '*/.*' -a -not -wholename '*/tests/samples/*' -a -not -wholename '*/corpus/*'); do
            n=$(( 1 + ${n} ))
            filetype=$(file ${f})
            if echo "${filetype}" | grep -q '.*text.*'; then
                echo "CHECK:'${filetype}'"
                lastbyte=$(hexdump -v -e '/1 "%02X\n"' ${f} | tail -1)
                echo "Last byte is '${lastbyte}'"
                if [ "0A" != "${lastbyte}" ]; then
                    echo "File ${f} has inappropriate line ending"
                    tail -1 ${f} | hexdump -C
                else
                    n=$(( ${n} - 1 ))
                fi
            else
                echo "SKIP:'${filetype}'"
                n=$(( ${n} - 1 ))
            fi
        done
        exit ${n}

    # # # git workflow

    - name: Get latest release tag name
      if: ${{ always() && steps.code_checkout.conclusion == 'success' }}
      run: |
        if [ "pull_request" == "${{ github.event_name }}" ]; then
            API_RELEASE_URL=$(echo "${{ github.event.pull_request.base.repo.releases_url }}")
        else
            API_RELEASE_URL=$(echo "${{ github.event.repository.releases_url }}")
        fi
        echo "'${API_RELEASE_URL}'" # dbg
        API_RELEASE_URL=$(echo "${API_RELEASE_URL}" | sed 's|.....$||')
        echo "'${API_RELEASE_URL}'" # dbg
        API_RELEASE_URL=$(echo "${API_RELEASE_URL}/latest")
        echo "'${API_RELEASE_URL}'" # dbg
        LATEST_RELEASE_TAG=$(
            curl \
                --silent \
                --header "Accept: application/vnd.github.v3+json" \
                --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                ${API_RELEASE_URL} \
            | \
            jq \
                --raw-output \
                '.tag_name' \
            )
        echo "LATEST_RELEASE_TAG='${LATEST_RELEASE_TAG}'"
        export GIT_ANCESTOR=${LATEST_RELEASE_TAG}
        if bash cicd/git_workflow.sh; then
            echo "GIT workflow OK"
        else
            echo "Please, rebase the branch after ${LATEST_RELEASE_TAG}"
            exit 1
        fi

    # # # Python setup

    - name: Set up Python
      if: ${{ always() && steps.code_checkout.conclusion == 'success' }}
      id: setup_python
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install CredSweeper and auxiliary packages
      id: setup_credsweeper
      if: ${{ always() && steps.setup_python.conclusion == 'success' }}
      run: |
        python --version #dbg
        python -m pip install --upgrade pip
        pip install --requirement requirements.txt
        pip list #dbg

    # # # documentation

    - name: Analysing the code with pylint for NEW missed docstrings of classes or functions
      if: ${{ always() && steps.setup_credsweeper.conclusion == 'success' }}
      run: |
        pylint --disable=E,R,W,C0114,C0103,C0412,C0413,C0415,C0200,C0201,C0325 --verbose credsweeper

    # # # Documentation check

    - name: Test for creation sphinx documentations
      if: ${{ always() && steps.setup_credsweeper.conclusion == 'success' }}
      run: |
        cd docs
        pip install -r requirements.txt
        make html


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
