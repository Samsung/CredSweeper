# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Fuzzing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  fuzz:

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Prepare commit status
      run: |
        STATE="pending"
        DESCRIPTION="..."
        for stage in 'coverage' 'new corpus' 'crash corpus'; do
          CONTEXT="Fuzzing / ${stage}"
          #dbg
          echo "CONTEXT='$CONTEXT'"
          curl -v -i \
            --request POST \
            --header "Accept: application/vnd.github.v3+json" \
            --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }}" \
            --data "{\"state\":\"${STATE}\", \"description\":\"${DESCRIPTION}\", \"context\":\"${CONTEXT}\"}"
        done

    - name: Backup corpus
      run: cp -r corpus corpus.bak

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install .
        python -m pip install .[ml]
        python -m pip install atheris coverage
        # dbg
        pip list

    - name: Run fuzzing test with coverage
      id: run_fuzz
      run: |
        add_runs=$(git log -1 --pretty=format:"%s" | sed 's|.*add_runs=\([0-9]\+\)|\1|')
        if [ -z "${add_runs}" ] || ! [ 0 -lt ${add_runs} ]; then add_runs=0; fi
        echo "Addition runs: add_runs=${add_runs}"
        # additional args: -rss_limit_mb=8000  -max_len=100000
        python -m coverage run --source=credsweeper fuzz -atheris_runs=$(( ${add_runs} + $(ls corpus | wc -l) )) -detect_leaks=0 corpus/

    - name: Create coverage report in HTML format
      run: |
        python -m coverage html

    - name: Coverage report in text representation
      run: |
        python -m coverage report

    - name: Update commit status - coverage
      if: always()
      run: |
        CONTEXT="Fuzzing / coverage"
        COVERAGE=$(python -m coverage report | tail -1 | awk '{print $6}' | tr --delete '%')
        if [ 70 -lt ${COVERAGE} ]; then STATE="success"; else STATE="failure"; fi
        DESCRIPTION="Coverage: ${COVERAGE}%"
        echo "STATE='${STATE}' DESCRIPTION='${DESCRIPTION}'"
        curl \
          --request POST \
          --header "Accept: application/vnd.github.v3+json" \
          --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
          --data "{\"state\":\"${STATE}\", \"description\":\"${DESCRIPTION}\", \"context\":\"${CONTEXT}\"}"

    - name: COVERAGE report
      uses: actions/upload-artifact@v2
      with:
        name: htmlcov
        path: htmlcov

    - name: Detect new corpus to upload as artifact
      if: always()
      run: |
        ls corpus | sort >corpus.txt
        ls corpus.bak | sort >corpus.bak.txt
        mkdir -vp new_corpus
        for f in $(comm -3 corpus.txt corpus.bak.txt); do cp -vf corpus/${f} new_corpus/; done
        echo "NEW_CORPUS=$(ls new_corpus | wc -l)" >> $GITHUB_ENV

    - name: Update commit status - new corpus
      if: always()
      run: |
        CONTEXT="Fuzzing / new corpus"
        STATE="success"
        if [ 0 -eq ${NEW_CORPUS} ]; then
          DESCRIPTION="New corpuses were not found"
        else
          DESCRIPTION="New corpuses found: ${NEW_CORPUS}"
        fi
        echo "STATE='${STATE}' DESCRIPTION='${DESCRIPTION}'"
        curl \
          --request POST \
          --header "Accept: application/vnd.github.v3+json" \
          --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
          --data "{\"state\":\"${STATE}\", \"description\":\"${DESCRIPTION}\", \"context\":\"${CONTEXT}\"}"

    - name: New corpus upload
      if: ${{ env.NEW_CORPUS > 0 }}
      uses: actions/upload-artifact@v2
      with:
        name: new_corpus
        path: new_corpus

    - name: Detect crash files
      if: always()
      id: crash_detect
      run: |
        mkdir -vp crash_corpus
        for f in $(find . -maxdepth 1 -regextype 'posix-extended' -regex '.*-[0-9a-f]{40}'); do mv -vf ${f} crash_corpus/; done
        echo "CRASH_CORPUS=$(ls crash_corpus | wc -l)" >> $GITHUB_ENV

    - name: Update commit status - crash corpus
      if: always()
      run: |
        CONTEXT="Fuzzing / crash corpus"
        if [ 0 -eq ${CRASH_CORPUS} ]; then
          STATE="success"
          DESCRIPTION="No crash corpuses were found"
        else
          STATE="failure"
          DESCRIPTION="Crash corpuses found: ${CRASH_CORPUS}"
        fi
        echo "STATE='${STATE}' DESCRIPTION='${DESCRIPTION}'"
        curl \
          --request POST \
          --header "Accept: application/vnd.github.v3+json" \
          --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
          --data "{\"state\":\"${STATE}\", \"description\":\"${DESCRIPTION}\", \"context\":\"${CONTEXT}\"}"

    - name: Crash corpus upload
      if: ${{ env.CRASH_CORPUS > 0 }}
      uses: actions/upload-artifact@v2
      with:
        name: crash_corpus
        path: crash_corpus

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
