# This workflow runs benchmark
# Separation of jobs helps to cache data even benchmark is fail

name: Benchmark

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  download_data:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout CredData
      uses: actions/checkout@v3
      with:
        repository: Samsung/CredData

    - name: Cache data
      id: cache-data
      uses: actions/cache@v3
      with:
        path: data
        key: cred-data-${{ hashFiles('snapshot.yaml') }}

    - name: Set up Python 3.8
      if: steps.cache-data.outputs.cache-hit != 'true'
      uses: actions/setup-python@v3
      with:
        python-version: 3.8

    - name: Install requirements of CredData
      if: steps.cache-data.outputs.cache-hit != 'true'
      run: pip install --requirement requirements.txt

    - name: Generate Data Asset
      if: steps.cache-data.outputs.cache-hit != 'true'
      run: python download_data.py --data_dir data


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  run_benchmark:

    needs: [download_data]

    runs-on: ubuntu-latest

    steps:

    - name: Checkout CredData
      uses: actions/checkout@v3
      with:
        repository: Samsung/CredData

    - name: Cache data
      id: cache-data
      uses: actions/cache@v3
      with:
        path: data
        key: cred-data-${{ hashFiles('snapshot.yaml') }}

    - name: Failure in case when cache missed
      if: steps.cache-data.outputs.cache-hit != 'true'
      run: exit 1

    - name: Check Data Asset - DEBUG
      if: steps.cache-data.outputs.cache-hit == 'true'
      run: ls -al . && ls -al data

    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: 3.8

    - name: Update PIP
      run: pip install --upgrade pip

    - name: Install virtualenv
      run: pip install virtualenv

    - name: Install requirements of CredData
      run: pip install --requirement requirements.txt

    - name: Checkout CredSweeper
      if: ${{ 'pull_request' == github.event_name }}
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        path: temp/CredSweeper

    - name: Patch benchmark for PR work
      if: ${{ 'pull_request' == github.event_name }}
      run: |
        sed -i 's|CREDSWEEPER = "https://github.com/Samsung/CredSweeper.git"|CREDSWEEPER = "dummy://github.com/Samsung/CredSweeper.git"|' benchmark/common/constants.py
        grep --with-filename --line-number 'dummy://github.com/Samsung/CredSweeper.git' benchmark/common/constants.py

    - name: Run Benchmark
      run: python -m benchmark --scanner credsweeper | tee credsweeper.log

    - name: Get only results
      run: |
        grep '^Detected Credentials: \|^result_cnt : \|^credsweeper ' credsweeper.log | LC_ALL=C sort | tee benchmark.txt
        cp $(find . -type f -name "output.json") .

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: report
        path: output.json

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: benchmark
        path: benchmark.txt

    - name: Verify benchmark scores of the PR
      if: ${{ 'pull_request' == github.event_name }}
      # update cicd/benchmark.txt with uploaded artifact if a difference is found
      run: LC_ALL=C sort temp/CredSweeper/cicd/benchmark.txt | diff - benchmark.txt

    - name: Checkout CredSweeper on push event
      if: ${{ 'pull_request' != github.event_name }}
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        path: CredSweeper

    - name: Verify benchmark scores on push event
      if: ${{ 'pull_request' != github.event_name }}
      # update cicd/benchmark.txt with uploaded artifact if a difference is found
      run: LC_ALL=C sort CredSweeper/cicd/benchmark.txt | diff - benchmark.txt

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
